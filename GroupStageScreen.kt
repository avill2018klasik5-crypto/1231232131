package com.example.cs2battlegame.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import com.example.cs2battlegame.viewmodel.GameViewModel

@Composable
fun GroupStageScreen(
    navController: NavHostController,
    gameViewModel: GameViewModel
) {
    val tournament by gameViewModel.selectedTournament.collectAsState()
    val teams = gameViewModel.teams.value
    val playerGroupMatches by gameViewModel.playerGroupMatches.collectAsState()
    val nextMatch = playerGroupMatches.find { !it.isPlayed }
    val playoffBracket by gameViewModel.playoffBracket.collectAsState()
    val selectedTeam = gameViewModel.gameState.value.selectedTeam
    val currentBattle by gameViewModel.gameState.collectAsState()
    val hasUnfinishedGroupMatch by gameViewModel.hasUnfinishedGroupMatch.collectAsState()

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏ "–í–∞—à–∏ –º–∞—Ç—á–∏"
    var isPlayerMatchesExpanded by remember { mutableStateOf(true) }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω
    LaunchedEffect(Unit) {
        gameViewModel.restoreMatchState()

        tournament?.let { nonNullTournament ->
            if (nonNullTournament.groups.isEmpty()) {
                gameViewModel.initializeTournament(nonNullTournament, teams)
            }
        }
        gameViewModel.initializePlayerTournament()

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ç—á –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø
        gameViewModel.resetCurrentMatch()
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å —ç–∫—Ä–∞–Ω–∞
    DisposableEffect(Unit) {
        onDispose {
            gameViewModel.saveCurrentMatchState()
        }
    }

    // –ï—Å–ª–∏ –ø–ª–µ–π-–æ—Ñ—Ñ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–µ—Ç–∫–µ
    LaunchedEffect(playoffBracket) {
        if (playoffBracket != null) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            gameViewModel.saveCurrentMatchState()
            navController.navigate("playoff_bracket")
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –º–∞—Ç—á –ø–ª–µ–π-–æ—Ñ—Ñ
    val hasUnfinishedPlayoffMatch = currentBattle.currentBattle != null &&
            playoffBracket != null &&
            currentBattle.currentBattle?.isSeriesFinished == false

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF1E1E1E))
            .padding(16.dp)
    ) {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        Text(
            text = "üìä –ì–†–£–ü–ü–û–í–û–ô –≠–¢–ê–ü - ${tournament?.name ?: "–¢—É—Ä–Ω–∏—Ä"}",
            color = Color(0xFF00FF88),
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 16.dp)
        )

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        TournamentStatsCard(tournament)

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞–º–∏ –∏–≥—Ä–æ–∫–∞
        PlayerGroupControls(
            gameViewModel = gameViewModel,
            navController = navController,
            nextMatch = nextMatch,
            playerGroupMatches = playerGroupMatches,
            selectedTeam = selectedTeam,
            hasUnfinishedPlayoffMatch = hasUnfinishedPlayoffMatch,
            hasUnfinishedGroupMatch = hasUnfinishedGroupMatch,
            isPlayerMatchesExpanded = isPlayerMatchesExpanded,
            onPlayerMatchesExpandedChange = { isPlayerMatchesExpanded = it }
        )

        Spacer(modifier = Modifier.height(16.dp))

        // –ì—Ä—É–ø–ø—ã
        tournament?.let { nonNullTournament ->
            if (nonNullTournament.groups.isNotEmpty()) {
                LazyColumn(
                    modifier = Modifier.weight(1f),
                    verticalArrangement = Arrangement.spacedBy(16.dp)
                ) {
                    items(nonNullTournament.groups) { group ->
                        GroupTable(group = group, gameViewModel = gameViewModel)
                    }
                }
            } else {
                Box(
                    modifier = Modifier
                        .weight(1f)
                        .fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = "–ì—Ä—É–ø–ø—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è...",
                        color = Color.White,
                        fontSize = 16.sp
                    )
                }
            }
        } ?: run {
            Box(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = "–¢—É—Ä–Ω–∏—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω",
                    color = Color.White,
                    fontSize = 16.sp
                )
            }
        }

        Spacer(modifier = Modifier.height(8.dp))

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        Button(
            onClick = {
                gameViewModel.saveCurrentMatchState()
                navController.popBackStack()
            },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF6200EE))
        ) {
            Text("‚Üê –ù–ê–ó–ê–î –ö –û–ë–ó–û–†–£ –¢–£–†–ù–ò–†–ê", fontSize = 16.sp)
        }
    }
}

@Composable
fun PlayerGroupControls(
    gameViewModel: GameViewModel,
    navController: NavHostController,
    nextMatch: com.example.cs2battlegame.model.PlayerMatch?,
    playerGroupMatches: List<com.example.cs2battlegame.model.PlayerMatch>,
    selectedTeam: com.example.cs2battlegame.model.Team?,
    hasUnfinishedPlayoffMatch: Boolean = false,
    hasUnfinishedGroupMatch: Boolean = false,
    isPlayerMatchesExpanded: Boolean = true,
    onPlayerMatchesExpandedChange: (Boolean) -> Unit
) {
    val playedMatches = playerGroupMatches.count { it.isPlayed }
    val totalMatches = playerGroupMatches.size
    val canPlayFinal = gameViewModel.canPlayFinal()

    Column(
        modifier = Modifier.fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞ –ø–ª–µ–π-–æ—Ñ—Ñ
        if (hasUnfinishedPlayoffMatch) {
            Button(
                onClick = {
                    gameViewModel.restoreMatchState()
                    navController.navigate("playoff_battle")
                },
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFFFFD700))
            ) {
                Text("üèÜ –ü–†–û–î–û–õ–ñ–ò–¢–¨ –ú–ê–¢–ß –ü–õ–ï–ô-–û–§–§", fontSize = 16.sp)
            }
        }

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –º–∞—Ç—á–∞
        if (hasUnfinishedGroupMatch) {
            Button(
                onClick = {
                    gameViewModel.restoreMatchState()
                    navController.navigate("battle")
                },
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFFFF9800))
            ) {
                Text("üéÆ –ü–†–û–î–û–õ–ñ–ò–¢–¨ –ú–ê–¢–ß –ì–†–£–ü–ü–´", fontSize = 16.sp)
            }
        }

        // –í–ï–†–ù–£–õ –ö–ù–û–ü–ö–£ "–ò–ì–†–ê–¢–¨ –°–õ–ï–î–£–Æ–©–ò–ô –ú–ê–¢–ß" - –û–ù–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –í–°–ï–ì–î–ê –í–ò–î–ù–ê
        if (nextMatch != null) {
            Button(
                onClick = {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ç—á –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ
                    gameViewModel.resetCurrentMatch()
                    val hasNext = gameViewModel.startNextPlayerMatch()
                    if (hasNext) {
                        gameViewModel.saveCurrentMatchState()
                        navController.navigate("battle")
                    }
                },
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF00FF88))
            ) {
                Text("üéÆ –ò–ì–†–ê–¢–¨ –°–õ–ï–î–£–Æ–©–ò–ô –ú–ê–¢–ß", fontSize = 16.sp)

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                nextMatch.opponent?.let { opponent ->
                    Text(
                        text = " vs ${opponent.name}",
                        fontSize = 12.sp
                    )
                }
            }
        }

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if (canPlayFinal) {
            Button(
                onClick = {
                    gameViewModel.startFinalMatch()
                    gameViewModel.saveCurrentMatchState()
                    navController.navigate("playoff_battle")
                },
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFFFFD700))
            ) {
                Text("üèÜ –ò–ì–†–ê–¢–¨ –§–ò–ù–ê–õ –¢–£–†–ù–ò–†–ê", fontSize = 16.sp)
            }
        }

        if (playerGroupMatches.isNotEmpty() && playedMatches == totalMatches && !canPlayFinal) {
            Text(
                text = "‚úÖ –í—Å–µ –º–∞—Ç—á–∏ –≥—Ä—É–ø–ø—ã —Å—ã–≥—Ä–∞–Ω—ã",
                color = Color(0xFF00FF88),
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.align(Alignment.CenterHorizontally)
            )

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–µ–π-–æ—Ñ—Ñ
            LaunchedEffect(Unit) {
                gameViewModel.initializePlayoffBracket()
            }
        }

        // –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∞—Ç—á–µ–π –∏–≥—Ä–æ–∫–∞ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –í–û–ó–ú–û–ñ–ù–û–°–¢–¨–Æ –°–í–û–†–ê–ß–ò–í–ê–ù–ò–Ø
        CollapsiblePlayerMatchesProgress(
            playerGroupMatches = playerGroupMatches,
            playedMatches = playedMatches,
            totalMatches = totalMatches,
            isExpanded = isPlayerMatchesExpanded,
            onExpandedChange = onPlayerMatchesExpandedChange
        )
    }
}

@Composable
fun CollapsiblePlayerMatchesProgress(
    playerGroupMatches: List<com.example.cs2battlegame.model.PlayerMatch>,
    playedMatches: Int,
    totalMatches: Int,
    isExpanded: Boolean,
    onExpandedChange: (Boolean) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        backgroundColor = Color(0xFF2D2D2D)
    ) {
        Column(modifier = Modifier.padding(12.dp)) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { onExpandedChange(!isExpanded) },
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "–í–ê–®–ò –ú–ê–¢–ß–ò: $playedMatches/$totalMatches",
                    color = Color(0xFF00FF88),
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold
                )

                // –ò–∫–æ–Ω–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
                Text(
                    text = if (isExpanded) "‚ñ≤" else "‚ñº",
                    color = Color(0xFF00FF88),
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold
                )
            }

            if (isExpanded) {
                Spacer(modifier = Modifier.height(8.dp))

                LinearProgressIndicator(
                    progress = if (totalMatches > 0) playedMatches.toFloat() / totalMatches else 0f,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(8.dp),
                    color = Color(0xFF00FF88),
                    backgroundColor = Color(0xFF444444)
                )

                Spacer(modifier = Modifier.height(8.dp))

                // –î–ï–¢–ê–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ö–ê–ñ–î–û–ì–û –ú–ê–¢–ß–ê –° –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò
                playerGroupMatches.forEach { match ->
                    DetailedMatchStatusItem(match = match)
                }
            } else {
                // –°–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π",
                    color = Color.Gray,
                    fontSize = 10.sp,
                    modifier = Modifier.align(Alignment.CenterHorizontally)
                )
            }
        }
    }
}

@Composable
fun DetailedMatchStatusItem(match: com.example.cs2battlegame.model.PlayerMatch) {
    val backgroundColor = when {
        match.isPlayed && match.playerScore > match.opponentScore -> Color(0xFF1B5E20) // –ü–æ–±–µ–¥–∞ - –∑–µ–ª–µ–Ω—ã–π
        match.isPlayed && match.playerScore < match.opponentScore -> Color(0xFF7B1FA2) // –ü–æ—Ä–∞–∂–µ–Ω–∏–µ - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        match.isPlayed -> Color(0xFF37474F) // –ù–∏—á—å—è (—Ä–µ–¥–∫–æ) - —Å–µ—Ä—ã–π
        else -> Color(0xFF424242) // –ù–µ —Å—ã–≥—Ä–∞–Ω - —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π
    }

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp),
        backgroundColor = backgroundColor,
        elevation = 2.dp
    ) {
        Column(modifier = Modifier.padding(12.dp)) {
            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column(modifier = Modifier.weight(2f)) {
                    Text(
                        text = "vs ${match.opponent.name}",
                        color = Color.White,
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = "–°–∏–ª–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${match.opponent.getDisplayStrength()}",
                        color = Color.Gray,
                        fontSize = 10.sp
                    )
                }

                if (match.isPlayed) {
                    Column(
                        horizontalAlignment = Alignment.End,
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(
                            text = "${match.playerScore}:${match.opponentScore}",
                            color = if (match.playerScore > match.opponentScore) Color(0xFF00FF88) else Color(0xFFFF4444),
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Bold
                        )
                        Text(
                            text = if (match.playerScore > match.opponentScore) "–ü–û–ë–ï–î–ê"
                            else if (match.playerScore < match.opponentScore) "–ü–û–†–ê–ñ–ï–ù–ò–ï"
                            else "–ù–ò–ß–¨–Ø",
                            color = if (match.playerScore > match.opponentScore) Color(0xFF00FF88)
                            else if (match.playerScore < match.opponentScore) Color(0xFFFF4444)
                            else Color(0xFFFFD700),
                            fontSize = 10.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }
                } else {
                    Text(
                        text = "–û–ñ–ò–î–ê–ï–¢–°–Ø",
                        color = Color(0xFFFF9800),
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
            }

            // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–∞—Ö (–µ—Å–ª–∏ –º–∞—Ç—á —Å—ã–≥—Ä–∞–Ω)
            if (match.isPlayed && match.mapResults.isNotEmpty()) {
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—Ä—Ç:",
                    color = Color.White,
                    fontSize = 10.sp,
                    fontWeight = FontWeight.Bold
                )

                match.mapResults.forEach { mapResult ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 2.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text(
                            text = mapResult.mapName,
                            color = Color.Gray,
                            fontSize = 9.sp
                        )
                        Text(
                            text = "${mapResult.team1Score}:${mapResult.team2Score}",
                            color = if (mapResult.winner == match.opponent) Color(0xFFFF4444) else Color(0xFF00FF88),
                            fontSize = 9.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }
                }
            }

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞
            if (match.isPlayed) {
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "–û–±—â–∏–π —Å—á–µ—Ç —Ä–∞—É–Ω–¥–æ–≤: ${calculateTotalRounds(match.mapResults)}",
                    color = Color.Gray,
                    fontSize = 9.sp
                )
            }
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞ —Ä–∞—É–Ω–¥–æ–≤
private fun calculateTotalRounds(mapResults: List<com.example.cs2battlegame.model.MapResult>): String {
    val team1Total = mapResults.sumBy { it.team1Score }
    val team2Total = mapResults.sumBy { it.team2Score }
    return "$team1Total:$team2Total"
}

@Composable
fun TournamentStatsCard(tournament: com.example.cs2battlegame.model.Tournament?) {
    val playedMatches = tournament?.groups?.flatMap { it.matches }?.count { it.isPlayed } ?: 0
    val totalMatches = tournament?.groups?.flatMap { it.matches }?.size ?: 0
    val progress = if (totalMatches > 0) playedMatches.toFloat() / totalMatches else 0f

    Card(
        modifier = Modifier.fillMaxWidth(),
        backgroundColor = Color(0xFF2D2D2D),
        elevation = 4.dp
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(
                text = "–ü–†–û–ì–†–ï–°–° –ì–†–£–ü–ü–û–í–û–ì–û –≠–¢–ê–ü–ê",
                color = Color(0xFF00FF88),
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            Text(
                text = "–°—ã–≥—Ä–∞–Ω–æ –º–∞—Ç—á–µ–π: $playedMatches/$totalMatches",
                color = Color.White,
                fontSize = 14.sp,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            LinearProgressIndicator(
                progress = progress,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(8.dp),
                color = Color(0xFF00FF88),
                backgroundColor = Color(0xFF444444)
            )

            Spacer(modifier = Modifier.height(8.dp))

            Row(modifier = Modifier.fillMaxWidth()) {
                TournamentStatItem("–ì—Ä—É–ø–ø—ã", "${tournament?.groups?.size ?: 0}", Modifier.weight(1f))
                TournamentStatItem("–ö–æ–º–∞–Ω–¥", "${tournament?.participantCount ?: 0}", Modifier.weight(1f))
                TournamentStatItem("–ü—Ä–æ–≥—Ä–µ—Å—Å", "${(progress * 100).toInt()}%", Modifier.weight(1f))
            }
        }
    }
}

@Composable
fun RowScope.TournamentStatItem(
    label: String,
    value: String,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = value,
            color = Color(0xFF00FF88),
            fontSize = 16.sp,
            fontWeight = FontWeight.Bold
        )
        Text(
            text = label,
            color = Color.Gray,
            fontSize = 12.sp
        )
    }
}

@Composable
fun GroupTable(group: com.example.cs2battlegame.model.TournamentGroup, gameViewModel: GameViewModel) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        backgroundColor = Color(0xFF2D2D2D),
        elevation = 4.dp
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = group.name,
                    color = Color(0xFFFFD700),
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold
                )

                Text(
                    text = "${group.matches.count { it.isPlayed }}/${group.matches.size} –º–∞—Ç—á–µ–π",
                    color = Color.Gray,
                    fontSize = 12.sp
                )
            }

            Spacer(modifier = Modifier.height(12.dp))

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text("–ö–æ–º–∞–Ω–¥–∞", color = Color.Gray, fontSize = 12.sp, modifier = Modifier.weight(3f))
                Text("–í", color = Color.Gray, fontSize = 12.sp, modifier = Modifier.weight(1f))
                Text("–ü", color = Color.Gray, fontSize = 12.sp, modifier = Modifier.weight(1f))
                Text("–†–†", color = Color.Gray, fontSize = 12.sp, modifier = Modifier.weight(1f))
                Text("–û", color = Color.Gray, fontSize = 12.sp, modifier = Modifier.weight(1f))
            }

            Spacer(modifier = Modifier.height(8.dp))

            // –°—Ç—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥
            group.teams.sortedByDescending { it.points }.forEachIndexed { index, groupTeam ->
                GroupTableRow(
                    groupTeam = groupTeam,
                    position = index + 1,
                    gameViewModel = gameViewModel
                )
                if (index < group.teams.size - 1) {
                    Divider(color = Color(0xFF444444), thickness = 1.dp, modifier = Modifier.padding(vertical = 4.dp))
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –≥—Ä—É–ø–ø—ã
            Text(
                text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏:",
                color = Color.White,
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            val recentMatches = group.matches.filter { it.isPlayed }.takeLast(3)
            if (recentMatches.isNotEmpty()) {
                recentMatches.forEach { match ->
                    MatchResultRow(match = match)
                }
            } else {
                Text(
                    text = "–ú–∞—Ç—á–∏ –µ—â–µ –Ω–µ —Å—ã–≥—Ä–∞–Ω—ã",
                    color = Color.Gray,
                    fontSize = 12.sp,
                    modifier = Modifier.padding(vertical = 8.dp)
                )
            }
        }
    }
}

@Composable
fun GroupTableRow(
    groupTeam: com.example.cs2battlegame.model.GroupTeam,
    position: Int,
    gameViewModel: GameViewModel
) {
    val isQualified = position <= 2

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp)
            .clickable { gameViewModel.showTeamStats(groupTeam.team) },
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Row(
            modifier = Modifier.weight(3f),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "$position.",
                color = if (isQualified) Color(0xFF00FF88) else Color.White,
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.width(24.dp)
            )

            Text(
                text = groupTeam.team.name,
                color = if (isQualified) Color(0xFF00FF88) else Color.White,
                fontSize = 14.sp,
                fontWeight = if (isQualified) FontWeight.Bold else FontWeight.Normal,
                maxLines = 1
            )

            if (isQualified) {
                Text(
                    text = " üèÜ",
                    color = Color(0xFFFFD700),
                    fontSize = 12.sp
                )
            }
        }

        Text(
            text = "${groupTeam.wins}",
            color = Color(0xFF00FF88),
            fontSize = 14.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.weight(1f)
        )

        Text(
            text = "${groupTeam.losses}",
            color = Color(0xFFFF4444),
            fontSize = 14.sp,
            modifier = Modifier.weight(1f)
        )

        Text(
            text = "${groupTeam.roundDifference}",
            color = Color.White,
            fontSize = 14.sp,
            modifier = Modifier.weight(1f)
        )

        Text(
            text = "${groupTeam.points}",
            color = Color(0xFFFFD700),
            fontSize = 14.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.weight(1f)
        )
    }
}

@Composable
fun MatchResultRow(match: com.example.cs2battlegame.model.GroupMatch) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = match.team1.name,
            color = if (match.winner == match.team1) Color(0xFF00FF88) else Color.White,
            fontSize = 12.sp,
            modifier = Modifier.weight(1f),
            maxLines = 1
        )

        Text(
            text = "${match.team1Score}:${match.team2Score}",
            color = Color(0xFFFFD700),
            fontSize = 12.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.weight(1f)
        )

        Text(
            text = match.team2.name,
            color = if (match.winner == match.team2) Color(0xFF00FF88) else Color.White,
            fontSize = 12.sp,
            modifier = Modifier.weight(1f),
            maxLines = 1
        )
    }
}