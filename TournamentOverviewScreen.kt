package com.example.cs2battlegame.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import com.example.cs2battlegame.viewmodel.GameViewModel

@Composable
fun TournamentOverviewScreen(
    navController: NavHostController,
    gameViewModel: GameViewModel
) {
    val selectedTournament = gameViewModel.selectedTournament.value
    val selectedTeam = gameViewModel.gameState.value.selectedTeam
    val playoffBracket = gameViewModel.playoffBracket.value

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF1E1E1E))
            .padding(16.dp)
    ) {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        Text(
            text = "üèÜ –û–ë–ó–û–† –¢–£–†–ù–ò–†–ê",
            color = Color(0xFF00FF88),
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 16.dp)
        )

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ
        Card(
            modifier = Modifier.fillMaxWidth(),
            backgroundColor = Color(0xFF2D2D2D),
            elevation = 4.dp
        ) {
            Column(modifier = Modifier.padding(16.dp)) {
                Text(
                    text = selectedTournament?.name ?: "–¢—É—Ä–Ω–∏—Ä",
                    color = Color(0xFFFFD700),
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold
                )

                Spacer(modifier = Modifier.height(8.dp))

                TournamentInfoRow("üéØ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", selectedTournament?.organizer ?: "")
                TournamentInfoRow("üìç –ú–µ—Å—Ç–æ", selectedTournament?.location ?: "")
                TournamentInfoRow("üìÖ –î–∞—Ç–∞", selectedTournament?.date ?: "")
                TournamentInfoRow("üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥", selectedTournament?.prizePool ?: "")
                TournamentInfoRow("‚öîÔ∏è –§–æ—Ä–º–∞—Ç", selectedTournament?.format ?: "")

                Spacer(modifier = Modifier.height(8.dp))

                Text(
                    text = "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: ${selectedTeam?.name ?: "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"}",
                    color = Color(0xFF00FF88),
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold
                )

                // –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = when {
                        playoffBracket?.champion != null -> "üèÜ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω"
                        playoffBracket != null -> "‚öîÔ∏è –°—Ç–∞–¥–∏—è –ø–ª–µ–π-–æ—Ñ—Ñ"
                        else -> "üìä –ì—Ä—É–ø–ø–æ–≤–∞—è —Å—Ç–∞–¥–∏—è"
                    },
                    color = when {
                        playoffBracket?.champion != null -> Color(0xFFFFD700)
                        playoffBracket != null -> Color(0xFFFF9800)
                        else -> Color(0xFF00FF88)
                    },
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold
                )

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–º–ø–∏–æ–Ω–µ
                playoffBracket?.champion?.let { champion ->
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "–ß–µ–º–ø–∏–æ–Ω: ${champion.name}",
                        color = Color(0xFFFFD700),
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
            }
        }

        Spacer(modifier = Modifier.height(20.dp))

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–º
        Column(
            modifier = Modifier.fillMaxWidth(),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Button(
                onClick = {
                    navController.navigate("group_stage")
                },
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF00FF88))
            ) {
                Text("üìä –ì–†–£–ü–ü–û–í–û–ô –≠–¢–ê–ü", fontSize = 16.sp)
            }

            // –ö–Ω–æ–ø–∫–∞ –ø–ª–µ–π-–æ—Ñ—Ñ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if (playoffBracket != null) {
                Button(
                    onClick = {
                        navController.navigate("playoff_bracket")
                    },
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFFFF9800))
                ) {
                    Text("üèÜ –°–ï–¢–ö–ê –ü–õ–ï–ô-–û–§–§", fontSize = 16.sp)
                }
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            if (playoffBracket != null) {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    backgroundColor = Color(0xFF2A2A2A),
                    elevation = 2.dp
                ) {
                    Column(modifier = Modifier.padding(12.dp)) {
                        Text(
                            text = "üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–ª–µ–π-–æ—Ñ—Ñ",
                            color = Color(0xFFFFD700),
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Bold
                        )

                        Spacer(modifier = Modifier.height(4.dp))

                        val totalMatches = listOfNotNull(
                            playoffBracket.quarterFinals.size,
                            playoffBracket.semiFinals.size,
                            playoffBracket.final?.let { 1 }
                        ).sum()

                        val completedMatches = listOfNotNull(
                            playoffBracket.quarterFinals.count { it.isCompleted },
                            playoffBracket.semiFinals.count { it.isCompleted },
                            playoffBracket.final?.let { if (it.isCompleted) 1 else 0 }
                        ).sum()

                        Text(
                            text = "–ú–∞—Ç—á–∏: $completedMatches/$totalMatches",
                            color = Color.White,
                            fontSize = 12.sp
                        )

                        if (playoffBracket.champion != null) {
                            Text(
                                text = "–ß–µ–º–ø–∏–æ–Ω: ${playoffBracket.champion?.name}",
                                color = Color(0xFF00FF88),
                                fontSize = 12.sp,
                                fontWeight = FontWeight.Bold
                            )
                        }
                    }
                }
            }
        }

        Spacer(modifier = Modifier.weight(1f))

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        Button(
            onClick = {
                navController.popBackStack("tournament_selection", false)
            },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF6200EE))
        ) {
            Text("‚Üê –í–´–ë–†–ê–¢–¨ –î–†–£–ì–û–ô –¢–£–†–ù–ò–†", fontSize = 16.sp)
        }
    }
}

@Composable
fun TournamentInfoRow(label: String, value: String) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp)
    ) {
        Text(
            text = label,
            color = Color.Gray,
            fontSize = 14.sp,
            modifier = Modifier.width(120.dp)
        )
        Text(
            text = value,
            color = Color.White,
            fontSize = 14.sp,
            fontWeight = FontWeight.Medium
        )
    }
}