package com.example.cs2battlegame.screens

import androidx.compose.foundation.background
import com.example.cs2battlegame.model.MapPool
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import com.example.cs2battlegame.viewmodel.GameViewModel
import kotlin.random.Random

@Composable
fun PlayerMatchScreen(
    navController: NavHostController,
    gameViewModel: GameViewModel
) {
    val currentMatch by gameViewModel.currentPlayerMatch.collectAsState()
    val playerTeam = gameViewModel.gameState.value.selectedTeam
    var playerMapsWon by remember { mutableStateOf(0) }
    var opponentMapsWon by remember { mutableStateOf(0) }
    var currentMap by remember { mutableStateOf(1) }
    var playerScore by remember { mutableStateOf(0) }
    var opponentScore by remember { mutableStateOf(0) }
    var isMatchFinished by remember { mutableStateOf(false) }
    val mapResults = remember { mutableListOf<com.example.cs2battlegame.model.MapResult>() }

    LaunchedEffect(Unit) {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞—É–Ω–¥ –º–∞—Ç—á–µ–π –≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö
        gameViewModel.simulateOneRoundGroupMatches()
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF1E1E1E))
            .padding(16.dp)
    ) {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        Text(
            text = "üéÆ –í–ê–® –ú–ê–¢–ß BO3",
            color = Color(0xFF00FF88),
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold
        )

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
        Card(
            modifier = Modifier.fillMaxWidth(),
            backgroundColor = Color(0xFF2D2D2D)
        ) {
            Column(modifier = Modifier.padding(16.dp)) {
                Text(
                    text = "${playerTeam?.name ?: "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞"} vs ${currentMatch?.opponent?.name ?: "–°–æ–ø–µ—Ä–Ω–∏–∫"}",
                    color = Color.White,
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold
                )
                Text(
                    text = "–ö–∞—Ä—Ç–∞ $currentMap/3 ‚Ä¢ BO3",
                    color = Color.Gray,
                    fontSize = 14.sp
                )
                Text(
                    text = "–°—á–µ—Ç –ø–æ –∫–∞—Ä—Ç–∞–º: $playerMapsWon - $opponentMapsWon",
                    color = Color(0xFFFFD700),
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold
                )

                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–∏–ª—É –∫–æ–º–∞–Ω–¥
                playerTeam?.let { pt ->
                    currentMatch?.opponent?.let { op ->
                        Text(
                            text = "–°–∏–ª–∞ –∫–æ–º–∞–Ω–¥: ${pt.getDisplayStrength()} vs ${op.getDisplayStrength()}",
                            color = Color(0xFF00FF88),
                            fontSize = 12.sp,
                            modifier = Modifier.padding(top = 4.dp)
                        )
                    }
                }
            }
        }

        Spacer(modifier = Modifier.height(20.dp))

        // –¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞
        Card(
            modifier = Modifier.fillMaxWidth(),
            backgroundColor = Color(0xFF2D2D2D)
        ) {
            Column(modifier = Modifier.padding(16.dp)) {
                Text(
                    text = "–ö–ê–†–¢–ê $currentMap",
                    color = Color(0xFFFF9800),
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold
                )
                Text(
                    text = "–°—á–µ—Ç: ${playerTeam?.name ?: "–í—ã"} $playerScore - ${opponentScore} ${currentMatch?.opponent?.name ?: "–°–æ–ø–µ—Ä–Ω–∏–∫"}",
                    color = Color.White,
                    fontSize = 16.sp
                )
                Text(
                    text = "–î–æ –ø–æ–±–µ–¥—ã: ${13 - maxOf(playerScore, opponentScore)} —Ä–∞—É–Ω–¥–æ–≤",
                    color = Color.Gray,
                    fontSize = 14.sp
                )
            }
        }

        Spacer(modifier = Modifier.height(20.dp))

        if (!isMatchFinished) {
            // === –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–ù–û–ü–ö–ê: –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—É–Ω–¥–∞ —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã ===
            Button(
                onClick = {
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã –∫–æ–º–∞–Ω–¥
                    val playerTeam = playerTeam ?: return@Button
                    val opponentTeam = currentMatch?.opponent ?: return@Button

                    val playerStrength = playerTeam.getDisplayStrength().toDouble()
                    val opponentStrength = opponentTeam.getDisplayStrength().toDouble()
                    val totalStrength = playerStrength + opponentStrength

                    // –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 50%, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è —Ä–∞–∑–Ω–∏—Ü–µ–π –≤ —Å–∏–ª–µ
                    val baseProbability = 0.5
                    val strengthDifference = (playerStrength - opponentStrength) / totalStrength
                    val winProbability = baseProbability + (strengthDifference * 0.4)

                    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—É–Ω–¥–∞ —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã
                    if (Random.nextDouble() < winProbability) {
                        playerScore++
                    } else {
                        opponentScore++
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –Ω–∞ –∫–∞—Ä—Ç–µ (–§–ò–ö–°: –¥–æ 13 —Ä–∞—É–Ω–¥–æ–≤)
                    if (playerScore >= 13 || opponentScore >= 13) {
                        val mapPool = currentMatch?.maps?.getOrNull(currentMap - 1)
                        val mapName = mapPool?.getDisplayName() ?: "–ö–∞—Ä—Ç–∞ $currentMap"
                        val winner = if (playerScore > opponentScore) playerTeam else currentMatch?.opponent

                        mapResults.add(com.example.cs2battlegame.model.MapResult(
                            mapNumber = currentMap,
                            mapName = mapName,
                            team1Score = playerScore,
                            team2Score = opponentScore,
                            winner = winner
                        ))

                        if (playerScore > opponentScore) {
                            playerMapsWon++
                        } else {
                            opponentMapsWon++
                        }

                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã
                        playerScore = 0
                        opponentScore = 0
                        currentMap++

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –º–∞—Ç—á–∞ BO3
                        if (playerMapsWon == 2 || opponentMapsWon == 2) {
                            isMatchFinished = true
                            gameViewModel.completePlayerMatch(playerMapsWon, opponentMapsWon, mapResults)
                        }
                    }
                },
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF00FF88))
            ) {
                Text("üéØ –°–ò–ú–£–õ–ò–†–û–í–ê–¢–¨ –†–ê–£–ù–î", fontSize = 16.sp)
            }

            // === –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–ù–û–ü–ö–ê: –ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∫–∞—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã ===
            Button(
                onClick = {
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã –∫–æ–º–∞–Ω–¥
                    val playerTeam = playerTeam ?: return@Button
                    val opponentTeam = currentMatch?.opponent ?: return@Button

                    val playerStrength = playerTeam.getDisplayStrength().toDouble()
                    val opponentStrength = opponentTeam.getDisplayStrength().toDouble()
                    val totalStrength = playerStrength + opponentStrength

                    // –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 50%, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è —Ä–∞–∑–Ω–∏—Ü–µ–π –≤ —Å–∏–ª–µ
                    val baseProbability = 0.5
                    val strengthDifference = (playerStrength - opponentStrength) / totalStrength
                    val winProbability = baseProbability + (strengthDifference * 0.4)

                    // –ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã
                    val mapPool = currentMatch?.maps?.getOrNull(currentMap - 1)
                    val mapName = mapPool?.getDisplayName() ?: "–ö–∞—Ä—Ç–∞ $currentMap"

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∫–∞—Ä—Ç—ã
                    val mapWinner = Random.nextDouble() < winProbability

                    // –§–ò–ö–°: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–æ 13 —Ä–∞—É–Ω–¥–æ–≤
                    if (mapWinner) {
                        playerScore = 13
                        opponentScore = Random.nextInt(0, 13) // 0-12
                        playerMapsWon++
                    } else {
                        opponentScore = 13
                        playerScore = Random.nextInt(0, 13) // 0-12
                        opponentMapsWon++
                    }

                    val winner = if (mapWinner) playerTeam else currentMatch?.opponent
                    mapResults.add(com.example.cs2battlegame.model.MapResult(
                        mapNumber = currentMap,
                        mapName = mapName,
                        team1Score = playerScore,
                        team2Score = opponentScore,
                        winner = winner
                    ))

                    playerScore = 0
                    opponentScore = 0
                    currentMap++

                    if (playerMapsWon == 2 || opponentMapsWon == 2) {
                        isMatchFinished = true
                        gameViewModel.completePlayerMatch(playerMapsWon, opponentMapsWon, mapResults)
                    }
                },
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFFFF9800))
            ) {
                Text("‚ö° –ë–´–°–¢–†–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –ö–ê–†–¢–´", fontSize = 16.sp)
            }
        } else {
            // –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ BO3
            Card(
                modifier = Modifier.fillMaxWidth(),
                backgroundColor = if (playerMapsWon > opponentMapsWon) Color(0xFF2A5C2A) else Color(0xFF5C2A2A)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = if (playerMapsWon > opponentMapsWon) "üèÜ –ü–û–ë–ï–î–ê –í –ú–ê–¢–ß–ï!" else "üíî –ü–û–†–ê–ñ–ï–ù–ò–ï –í –ú–ê–¢–ß–ï",
                        color = Color.White,
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = "–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç BO3: $playerMapsWon - $opponentMapsWon",
                        color = Color.White,
                        fontSize = 18.sp
                    )

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—Ä—Ç
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—Ä—Ç:",
                        color = Color.White,
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Bold
                    )
                    mapResults.forEach { mapResult ->
                        Text(
                            text = "${mapResult.mapName}: ${mapResult.team1Score}:${mapResult.team2Score}",
                            color = if (mapResult.winner == playerTeam) Color(0xFF00FF88) else Color(0xFFFF4444),
                            fontSize = 12.sp
                        )
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    Button(
                        onClick = {
                            if (gameViewModel.startNextPlayerMatch()) {
                                navController.navigate("player_match")
                            } else {
                                navController.navigate("group_stage")
                            }
                        },
                        colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF6200EE))
                    ) {
                        Text("‚û°Ô∏è –î–ê–õ–ï–ï", fontSize = 16.sp)
                    }
                }
            }
        }

        Spacer(modifier = Modifier.weight(1f))

        Button(
            onClick = { navController.popBackStack() },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF6200EE))
        ) {
            Text("‚Üê –ù–ê–ó–ê–î –ö –ì–†–£–ü–ü–ï", fontSize = 16.sp)
        }
    }
}