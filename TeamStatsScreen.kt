package com.example.cs2battlegame.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import com.example.cs2battlegame.utils.SafeTeamLogo
import com.example.cs2battlegame.viewmodel.GameViewModel

@Composable
fun TeamStatsScreen(
    gameViewModel: GameViewModel
) {
    val selectedTeam = gameViewModel.selectedTeamForStats.value

    if (selectedTeam != null) {
        Dialog(
            onDismissRequest = {
                gameViewModel.hideTeamStats()
            }
        ) {
            TeamStatsDialog(
                team = selectedTeam,
                onClose = {
                    gameViewModel.hideTeamStats()
                }
            )
        }
    }
}

@Composable
fun TeamStatsDialog(team: com.example.cs2battlegame.model.Team, onClose: () -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        shape = RoundedCornerShape(12.dp),
        backgroundColor = Color(0xFF2D2D2D),
        elevation = 8.dp
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–û
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ê–ù–î–´",
                    color = Color(0xFF00FF88),
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold
                )

                IconButton(
                    onClick = onClose
                ) {
                    Icon(
                        imageVector = Icons.Default.Close,
                        contentDescription = "–ó–∞–∫—Ä—ã—Ç—å",
                        tint = Color.White
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column {
                    Text(
                        text = team.name,
                        color = Color.White,
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = "${team.country} ‚Ä¢ –û—Å–Ω–æ–≤–∞–Ω–∞ –≤ ${team.establishedYear}",
                        color = Color.Gray,
                        fontSize = 14.sp
                    )
                    Text(
                        text = "–¢—Ä–µ–Ω–µ—Ä: ${team.coach}",
                        color = Color.Gray,
                        fontSize = 14.sp
                    )
                }

                SafeTeamLogo(teamName = team.name, modifier = Modifier.size(60.dp))
            }

            Spacer(modifier = Modifier.height(20.dp))

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            Text(
                text = "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
                color = Color.White,
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            // –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            Row(modifier = Modifier.fillMaxWidth()) {
                StatCard(
                    title = "–ü–æ–±–µ–¥—ã",
                    value = team.wins.toString(),
                    color = Color(0xFF00FF88),
                    modifier = Modifier.weight(1f)
                )
                Spacer(modifier = Modifier.width(8.dp))
                StatCard(
                    title = "–ü–æ—Ä–∞–∂–µ–Ω–∏—è",
                    value = team.losses.toString(),
                    color = Color(0xFFFF4444),
                    modifier = Modifier.weight(1f)
                )
            }

            Spacer(modifier = Modifier.height(8.dp))

            Row(modifier = Modifier.fillMaxWidth()) {
                StatCard(
                    title = "–í–∏–Ω—Ä–µ–π—Ç",
                    value = "${String.format("%.1f", team.getWinRate())}%",
                    color = Color(0xFF2196F3),
                    modifier = Modifier.weight(1f)
                )
                Spacer(modifier = Modifier.width(8.dp))
                StatCard(
                    title = "–ö–∞—Ä—Ç —Å—ã–≥—Ä–∞–Ω–æ",
                    value = team.mapsPlayed.toString(),
                    color = Color(0xFFFF9800),
                    modifier = Modifier.weight(1f)
                )
            }

            Spacer(modifier = Modifier.height(20.dp))

            // –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
            Text(
                text = "–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:",
                color = Color.White,
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            LazyColumn(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp)
            ) {
                items(team.players) { player ->
                    PlayerCard(player = player)
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // –°–∏–ª–∞ –∫–æ–º–∞–Ω–¥—ã
            Text(
                text = "–û–±—â–∞—è —Å–∏–ª–∞ –∫–æ–º–∞–Ω–¥—ã: ${team.getDisplayStrength()}",
                color = Color(0xFF00FF88),
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.align(Alignment.CenterHorizontally)
            )

            // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–Ω–∏–∑—É - –ò–°–ü–†–ê–í–õ–ï–ù–ê
            Button(
                onClick = onClose,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 16.dp),
                colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF6200EE))
            ) {
                Text("–ó–ê–ö–†–´–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£", fontSize = 16.sp)
            }
        }
    }
}

@Composable
fun StatCard(title: String, value: String, color: Color, modifier: Modifier = Modifier) {
    Card(
        modifier = modifier,
        backgroundColor = Color(0xFF3D3D3D),
        elevation = 4.dp
    ) {
        Column(
            modifier = Modifier.padding(12.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = value,
                color = color,
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold
            )
            Text(
                text = title,
                color = Color.White,
                fontSize = 12.sp
            )
        }
    }
}

@Composable
fun PlayerCard(player: com.example.cs2battlegame.model.Player) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp),
        backgroundColor = Color(0xFF3D3D3D),
        elevation = 2.dp
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(12.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column {
                Text(
                    text = player.name,
                    color = Color.White,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold
                )
                Text(
                    text = getRoleDisplayName(player.role),
                    color = Color.Gray,
                    fontSize = 12.sp
                )
            }

            Text(
                text = "${player.skill} SKL",
                color = Color(0xFF00FF88),
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold
            )
        }
    }
}

fun getRoleDisplayName(role: com.example.cs2battlegame.model.PlayerRole): String {
    return when (role) {
        com.example.cs2battlegame.model.PlayerRole.AWPER -> "–°–Ω–∞–π–ø–µ—Ä"
        com.example.cs2battlegame.model.PlayerRole.ENTRY -> "–≠–Ω—Ç—Ä–∏ —Ñ—Ä–∞–≥–µ—Ä"
        com.example.cs2battlegame.model.PlayerRole.SUPPORT -> "–°–∞–ø–ø–æ—Ä—Ç"
        com.example.cs2battlegame.model.PlayerRole.LURKER -> "–õ–µ—Ä–∫–µ—Ä"
        com.example.cs2battlegame.model.PlayerRole.IGL -> "–ö–∞–ø–∏—Ç–∞–Ω"
    }
}